openapi: 3.0.0
info:
  title: Bridge API
  description: The Bridge API allows for task management and collaboration.
  version: "1.0.0"
servers:
  - url: 'http://localhost:3000'
    description: Production server
paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Error in registration
  /users/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Authentication failed
  /users/profile:
    get:
      summary: Retrieve user profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile information retrieved successfully
        '401':
          description: Authentication required
  /users/logout:
    post:
      summary: Logout a user
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully
        '401':
          description: Authentication required
  /users/updatePassword:
    post:
      summary: Change the user's password.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Authentication failed
  /projects:
    post:
      summary: Create a new project
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created successfully
        '400':
          description: Error creating project
    get:
      summary: List all projects
      tags:
        - Projects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of projects
        '401':
          description: Authentication required
  /projects/{projectId}:
    get:
      summary: Get details of a specific project
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Specific project details
        '401':
          description: Authentication required
        '404':
          description: Project not found
    put:
      summary: Update a specific project
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully
        '400':
          description: Error updating project
        '401':
          description: Authentication required
        '404':
          description: Project not found
    delete:
      summary: Delete a specific project
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Project deleted successfully
        '401':
          description: Authentication required
        '404':
          description: Project not found
  /projects/{projectId}/tasks:
    post:
      summary: Add a new task to a project
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
          Page:
            name: page
            in: query
            required: false
            schema:
              type: integer
              default: 1
          Limit:
            name: limit
            in: query
            required: false
            schema:
              type: integer
              default: 10

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task added successfully
        '400':
          description: Error adding task
        '401':
          description: Authentication required
    get:
      summary: List tasks within a project
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: A list of tasks for the project
        '401':
          description: Authentication required
  /projects/{projectId}/tasks/{taskId}:
    put:
      summary: Update a task within a project
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
        '400':
          description: Error updating task
        '401':
          description: Authentication required
        '404':
          description: Task not found
    delete:
      summary: Delete a task within a project
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task deleted successfully
        '401':
          description: Authentication required
        '404':
          description: Task not found
  /projects/{projectId}/tasks/{taskId}/upload:
    post:
      summary: Upload a file to a specific task
      tags:
        - Files
      security:
        - BearerAuth: [] 
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: No file uploaded or error in file upload
        '500':
          description: Server error


  /projects/{projectId}/tasks/{taskId}/assign:
    post:
      summary: Assign a task to a user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Task assigned successfully
        '400':
          description: Error in assigning task
        '401':
          description: Authentication required
        '403':
          description: Authorization required as project manager
        '404':
          description: Task or user not found

  /projects/{projectId}/details:
    patch:
      summary: Update project start date, end date, and budget details
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                  example: '2023-01-01'
                endDate:
                  type: string
                  format: date
                  example: '2023-12-31'
                budgetDetails:
                  $ref: '#/components/schemas/BudgetDetails'
      responses:
        '200':
          description: Project details updated successfully
        '400':
          description: Invalid input
        '401':
          description: Authentication required
        '403':
          description: Authorization required
        '404':
          description: Project not found
  /projects/{projectId}/phases:
    post:
      summary: Add a phase to a project
      tags:
        - Phases
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase'
      responses:
        '201':
          description: Phase added successfully
        '400':
          description: Error adding phase
        '401':
          description: Authentication required
        '403':
          description: Authorization required as project manager
        '404':
          description: Project not found

  /projects/{projectId}/phases/{phaseId}:
    get:
      summary: Get a specific phase of a project
      tags:
        - Phases
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - name: phaseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Specific phase details
        '401':
          description: Authentication required
        '404':
          description: Phase not found
    put:
      summary: Update a specific phase of a project
      tags:
        - Phases
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - name: phaseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase'
      responses:
        '200':
          description: Phase updated successfully
        '400':
          description: Error updating phase
        '401':
          description: Authentication required
        '403':
          description: Authorization required as project manager
        '404':
          description: Phase not found
    delete:
      summary: Delete a specific phase of a project
      tags:
        - Phases
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - name: phaseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Phase deleted successfully
        '401':
          description: Authentication required
        '403':
          description: Authorization required as project manager
        '404':
          description: Phase not found

  /projects/{projectId}/phases/{phaseId}/milestones:
    post:
      summary: Add a milestone to a project
      tags:
        - Milestones
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - name: phaseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Milestone'
      responses:
        '201':
          description: Milestone added successfully
        '400':
          description: Error adding milestone
        '401':
          description: Authentication required
        '403':
          description: Authorization required as project manager
        '404':
          description: Project not found

  /projects/{projectId}/phases/{phaseId}/milestones:{milestoneId}:
    put:
      summary: Update a milestone within a project
      tags:
        - Milestones
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - name: phaseId
          in: path
          required: true
          schema:
            type: string
        - name: milestoneId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Milestone'
      responses:
        '200':
          description: Milestone updated successfully
        '400':
          description: Error updating milestone
        '401':
          description: Authentication required
        '403':
          description: Authorization required as project manager
        '404':
          description: Milestone not found
    delete:
      summary: Delete a milestone from a project
      tags:
        - Milestones
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - name: phaseId
          in: path
          required: true
          schema:
            type: string
        - name: milestoneId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Milestone deleted successfully
        '401':
          description: Authentication required
        '403':
          description: Authorization required as project manager
        '404':
          description: Milestone not found 
  /users/requestPasswordReset:
    post:
      summary: Request password reset
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent successfully
        '404':
          description: User not found

  /users/resetPassword:
    post:
      summary: Reset password
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Invalid or expired token
  /files/{fileId}:
    get:
      summary: Retrieve details of a specific file
      tags:
        - Files
      security:
        - BearerAuth: []
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '404':
          description: File not found
        '500':
          description: Server error
    put:
      summary: Update a specific file
      tags:
        - Files
      security:
        - BearerAuth: []
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File updated successfully
        '400':
          description: No file uploaded or error in file upload
        '404':
          description: File not found
        '500':
          description: Server error
    delete:
      summary: Delete a specific file
      tags:
        - Files
      security:
        - BearerAuth: []
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File deleted successfully
        '404':
          description: File not found
        '500':
          description: Server error


  
components:
  securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
          enum: ['user', 'projectManager', 'admin']
    Project:
      type: object
      required:
        - name
        - projectManager
        - startDate
        - endDate
      properties:
        name:
          type: string
        description:
          type: string
        projectManager:
          type: string
          format: uuid
          description: The ID of the user who is the manager of this project
        startDate:
          type: string
          format: date
          example: '2023-01-01'
        endDate:
          type: string
          format: date
          example: '2023-12-31'
        budgetDetails:
          $ref: '#/components/schemas/BudgetDetails'

    Phase:
      type: object
      required:
        - name
        - startDate
        - endDate
      properties:
        name:
          type: string
        startDate:
          type: string
          format: date
          example: '2023-01-01'
        endDate:
          type: string
          format: date
          example: '2023-12-31'
        status:
          type: string
          enum: ['Not Started', 'In Progress', 'Completed']
          default: 'Not Started'
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'

    # Define the Milestone schema
    Milestone:
      type: object
      required:
        - title
        - dueDate
      properties:
        title:
          type: string
        dueDate:
          type: string
          format: date
          example: '2023-06-01'
        completed:
          type: boolean
          default: false
    Task:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [open, in_progress, completed]
        priority:
          type: string
          enum: ['low', 'medium', 'high']
        assignee:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date
        project:
          type: string
          format: uuid
          
    BudgetDetails:
      type: object
      properties:
        estimatedBudget:
          type: number
          format: double
          example: 100000.00
        currentSpend:
          type: number
          format: double
          example: 50000.00
        forecastCompletionBudget:
          type: number
          format: double
          example: 90000.00
    File:
      type: object
      properties:
        filename:
          type: string
        filepath:
          type: string
        taskId:
          type: string
          format: uuid
  parameters:
    ProjectId:
      name: projectId
      in: path
      required: true
      schema:
        type: string
    TaskId:
      name: taskId
      in: path
      required: true
      schema:
        type: string
    PhaseId:
      name: taskId
      in: path
      required: true
      schema:
        type: string
    MilestoneId:
      name: milestoneId
      in: path
      required: true
      schema:
        type: string
    FileId:
      name: fileId
      in: path
      required: true
      schema:
        type: string
    